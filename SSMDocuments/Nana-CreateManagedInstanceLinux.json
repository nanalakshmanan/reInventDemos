{
  "schemaVersion": "0.3",
  "description": "Creates a Windows Managed Instance",
  "assumeRole": "arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationServiceRole",
   "parameters": {
    "RoleName": {
      "type": "String",
      "description": "(Required) Rolename to create.",
	  "default": "Role-{{automation:EXECUTION_ID}}"
    },
    "GroupName": {
      "type": "String",
      "description": "(Required) Group Name to create.",
	  "default": "Group-{{automation:EXECUTION_ID}}"
    },
    "AmiId": {
      "type": "String",
      "description": "(Required) AMI id to use for launching the instance."
    } ,
    "InstanceType": {
      "type": "String",
      "description": "(Optional) Type of instance to launch. Default is t2.medium.",
      "default": "t2.medium"
    }, 
    "KeyPairName": {
      "type": "String",
      "description": "(Required) Key pair to use when creating instance."
    }    
   },
"mainSteps": [
    {
        "name": "makeLambdaStackRole",
        "action": "aws:createStack",
        "maxAttempts": 1,
        "onFailure": "Abort",
        "inputs": {
        "Capabilities": [
            "CAPABILITY_IAM"
        ],
        "StackName": "AutomationLambdaStack{{RoleName}}",
        "TemplateBody": "{\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \n    \"Description\" : \"AWS CloudFormation to create a lambda function. The lambda function will create a managed instance profile user for SSM\",\n  \n    \"Resources\" : { \n\n        \"AutomationCreateRole\" : {\n            \"Type\": \"AWS::Lambda::Function\",\n            \"Properties\": {\n                \"Code\": {\n                    \"ZipFile\" : \"\\\"Lambda handler\\\"\\nfrom __future__ import print_function\\n\\nimport json\\nimport boto3\\n\\nprint('Loading function')\\n\\nPOLICY_ARNS = ['arn:aws:iam::aws:policy\\\/service-role\\\/AmazonEC2RoleforSSM']\\n\\ndef lambda_handler(event, context):\\n    \\\"Lambda handler\\\"\\n    print(\\\"Received event: \\\" + json.dumps(event, indent=2))\\n\\n    rolename = event['rolename']\\n    # get SSM client\\n    iam = boto3.client('iam')\\n\\n    try:\\n        response = iam.get_role(\\n            RoleName=rolename\\n        )\\n\\n        if response :\\n            print(\\\"Role \\\" + rolename + \\\" exists. Quitting\\\")\\n            return\\n    except:\\n        print(\\\"Role \\\" + rolename + \\\" does not exist. Creating\\\")\\n\\n    my_access_control_policy = {\\n        \\\"Version\\\": \\\"2012-10-17\\\",\\n        \\\"Statement\\\": [\\n            {\\n                \\\"Effect\\\": \\\"Allow\\\",\\n                \\\"Principal\\\": {\\n                    \\\"Service\\\": [\\n                        \\\"ssm.amazonaws.com\\\",\\n                        \\\"ec2.amazonaws.com\\\"\\n                    ]\\n                    },\\n                \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n            }\\n        ]\\n    }\\n\\n    try:\\n        # Get the desired role\\n        response = iam.create_role(\\n            RoleName=rolename,\\n            Description='Role created from Lambda',\\n            AssumeRolePolicyDocument=json.dumps(my_access_control_policy)\\n            )\\n\\n        if response:\\n            for policy in POLICY_ARNS:\\n                iam.attach_role_policy(\\n                    RoleName=rolename,\\n                    PolicyArn=policy\\n                )\\n        print(\\\"Role \\\" + rolename + \\\" created\\\")\\n    except:\\n        print(\\\"Error in creating role \\\" + rolename)\\n        return\\n\\n    try:\\n        # create the instance profile\\n        response = iam.create_instance_profile(\\n            InstanceProfileName=rolename\\n        )\\n\\n        if response:\\n            iam.add_role_to_instance_profile(\\n                InstanceProfileName=rolename,\\n                RoleName=rolename\\n            )\\n            print(\\\"Instance profile \\\" + rolename + \\\" created\\\")\\n    except:\\n        print(\\\"Error in creating instance profile \\\" + rolename)\"\n                },\n                \"Role\": \"arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationLambdaRole\",\n                \"Timeout\": 60,\n                \"Handler\": \"index.lambda_handler\",\n                \"Runtime\": \"python3.6\",\n                \"MemorySize\": 128,\n                \"FunctionName\" : \"Automation-{{RoleName}}\"\n            }\n        }\n    }\n}",
        "TimeoutInMinutes": 5
        }
    },
    {
        "name": "invokeMyLambdaFunctionRole",
        "action": "aws:invokeLambdaFunction",
        "maxAttempts": 3,
        "timeoutSeconds": 120,
        "onFailure": "Abort",
        "inputs": {
            "FunctionName": "Automation-{{RoleName}}",
            "Payload": "{\r\n  \"rolename\": \"{{RoleName}}\"\r\n}"
        }
    },
    {
        "name":"deleteLambdaStackRole",
        "action":"aws:deleteStack",
        "maxAttempts":1,
        "onFailure":"Abort",
        "inputs":{
            "StackName":"AutomationLambdaStack{{RoleName}}"
        }
    },
    {
        "name": "makeLambdaStackSG",
        "action": "aws:createStack",
        "maxAttempts": 1,
        "onFailure": "Abort",
        "inputs": {
            "Capabilities": [
            "CAPABILITY_IAM"
            ],
            "StackName": "AutomationLambdaStack{{GroupName}}",
            "TemplateBody": "{\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \n    \"Description\" : \"AWS CloudFormation to create a lambda function. The lambda function will create a security group that only allows RDP\",\n  \n    \"Resources\" : { \n\n        \"AutomationCreateSecurityGroup\" : {\n            \"Type\": \"AWS::Lambda::Function\",\n            \"Properties\": {\n                \"Code\": {\n                    \"ZipFile\" : \"\\\"Lambda handler\\\"\\nfrom __future__ import print_function\\n\\nimport json\\nimport boto3\\nfrom botocore.exceptions import ClientError\\n\\nprint('Loading function')\\n\\ndef lambda_handler(event, context):\\n    \\\"Lambda handler\\\"\\n    print(\\\"Received event: \\\" + json.dumps(event, indent=2))\\n\\n    groupname = event['groupname']\\n    platform = event['platform']\\n\\n    # get EC2 client\\n    ec2 = boto3.client('ec2')\\n\\n    response = ec2.describe_vpcs()\\n    vpc_id = response.get('Vpcs', [{}])[0].get('VpcId', '')\\n\\n    try:\\n        response = ec2.create_security_group(GroupName=groupname,\\n                                             Description='Security Group created from Lambda',\\n                                             VpcId=vpc_id)\\n        security_group_id = response['GroupId']\\n        print('Security Group Created %s in vpc %s.' % (security_group_id, vpc_id))\\n\\n        if platform.lower() == 'windows':\\n            data = ec2.authorize_security_group_ingress(\\n                GroupId=security_group_id,\\n                IpPermissions=[\\n                    {'IpProtocol': 'tcp',\\n                     'FromPort': 3389,\\n                     'ToPort': 3389,\\n                     'IpRanges': [{'CidrIp': '0.0.0.0\\\/0'}]}\\n                ])\\n            print('Ingress Successfully Set %s' % data)\\n        else:\\n            data = ec2.authorize_security_group_ingress(\\n                GroupId=security_group_id,\\n                IpPermissions=[\\n                    {'IpProtocol': 'tcp',\\n                     'FromPort': 22,\\n                     'ToPort': 22,\\n                     'IpRanges': [{'CidrIp': '0.0.0.0\\\/0'}]}\\n                ])\\n            print('Ingress Successfully Set %s' % data)\\n    except ClientError as ex:\\n        print(ex)\\n\"\n                },\n                \"Role\": \"arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationLambdaRole\",\n                \"Timeout\": 60,\n                \"Handler\": \"index.lambda_handler\",\n                \"Runtime\": \"python3.6\",\n                \"MemorySize\": 128,\n                \"FunctionName\" : \"Automation-{{GroupName}}\"\n            }\n        }\n    }\n}",
            "TimeoutInMinutes": 5
        }
        },
        {
            "name": "invokeMyLambdaFunctionSG",
            "action": "aws:invokeLambdaFunction",
            "maxAttempts": 3,
            "timeoutSeconds": 120,
            "onFailure": "Abort",
            "inputs": {
                "FunctionName": "Automation-{{GroupName}}",
                "Payload": "{\r\n  \"groupname\": \"{{GroupName}}\",\r\n  \"platform\" : \"Linux\"\r\n}"
            }
        },
        {
            "name":"deleteLambdaStackSG",
            "action":"aws:deleteStack",
            "maxAttempts":1,
            "onFailure":"Abort",
            "inputs":{
                "StackName":"AutomationLambdaStack{{GroupName}}"
            }
        },
        {
            "name": "LaunchInstance",
            "action": "aws:runInstances",
            "maxAttempts": 3,
            "timeoutSeconds": 1200,
            "onFailure": "Abort",
            "inputs": {
                "ImageId": "{{AmiId}}",
                "InstanceType": "{{InstanceType}}",
                "MinInstanceCount": 1,
                "MaxInstanceCount": 1,
                "IamInstanceProfileName": "{{RoleName}}",
                "SecurityGroups" :["{{GroupName}}"],
                "KeyName" : "{{KeyPairName}}"
            }
		}
	],
	"outputs": ["LaunchInstance.InstanceIds"]
}